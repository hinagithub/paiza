// 問題
// 九九表を、横の数値間では | (半角スペース バーティカルライン 半角スペース)、縦の数値間では = で区切って出力してください。
// ただし、数値を出力する際は 2 けたになるよう半角スペース埋めで出力します。
// また、縦の数値間で = を出力する際は、その上の行と文字数が等しくなるように出力します。

// 期待値
// 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9
// ==========================================
//  2 |  4 |  6 |  8 | 10 | 12 | 14 | 16 | 18
// ==========================================
//  3 |  6 |  9 | 12 | 15 | 18 | 21 | 24 | 27
// ==========================================
//  4 |  8 | 12 | 16 | 20 | 24 | 28 | 32 | 36
// ==========================================
//  5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45
// ==========================================
//  6 | 12 | 18 | 24 | 30 | 36 | 42 | 48 | 54
// ==========================================
//  7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 | 63
// ==========================================
//  8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72
// ==========================================
//  9 | 18 | 27 | 36 | 45 | 54 | 63 | 72 | 81

package main

import (
	"fmt"
	"strings"
)

func main() {
	const max = 9
	var lineLen int

	for i := 1; i <= max; i++ {
		var multiplicationResults []string
		for j := 1; j <= max; j++ {
			multiplicationResults = append(multiplicationResults, fmt.Sprintf("%2d", i*j))
		}

		multiplicationLine := strings.Join(multiplicationResults, " | ")
		fmt.Println(multiplicationLine)

		if i == 1 {
			lineLen = len(multiplicationLine)
		}

		if i != max {
			fmt.Println(strings.Repeat("=", lineLen))
		}
	}
}
